apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: terminal
spec:
  # kro uses this simple schema to create your CRD schema and apply it
  # The schema defines what users can provide when they instantiate the RGD (create an instance).
  schema:
    apiVersion: v1alpha1
    kind: Terminal
    spec:
      # Spec fields that users can provide.
      name: string
      image: string | default="explabs/terminal-agent:latest"
      domain: string | default="learnops.local" 
    status:
      # Fields the controller will inject into instances status.
      deploymentConditions: ${deployment.status.conditions}
      availableReplicas: ${deployment.status.availableReplicas}

  # Define the resources this API will manage.
  resources:
    - id: deployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name} # Use the name provided by user
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ${schema.spec.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
              annotations:
                learnops/name: "Terminal"
                learnops/description: "You're here"
                learnops/ws: ${schema.spec.name}-${schema.metadata.namespace}.${schema.spec.domain}/xterm.js
            spec:
              containers:
                - name: ${schema.spec.name}
                  image: ${schema.spec.image} # Use the image provided by user
                  ports:
                    - containerPort: 8376
                  args:
                    - "--allowed-hostnames=${schema.spec.name}-${schema.metadata.namespace}.${schema.spec.domain}"

    - id: service
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-service
        spec:
          selector: ${deployment.spec.selector.matchLabels} # Use the deployment selector
          ports:
            - protocol: TCP
              port: 8376
              targetPort: 8376

    - id: ingress
      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.spec.name}-ingress
          annotations:
            cert-manager.io/cluster-issuer: ca-issuer
       
        spec:
          ingressClassName: nginx
          tls:
            - hosts:
              - ${schema.spec.name}-${schema.metadata.namespace}.${schema.spec.domain}
              secretName: ${schema.spec.name}-tls
          rules:
            - host: ${schema.spec.name}-${schema.metadata.namespace}.${schema.spec.domain}
              http:
                paths:
                  - path: "/"
                    pathType: Prefix
                    backend:
                      service:
                        name: ${service.metadata.name} # Use the service name
                        port:
                          number: 8376